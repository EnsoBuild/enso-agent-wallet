// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import "forge-std/Script.sol";
import "../src/LitAgentRegistry.sol";

interface ICreateX {
    struct Values {
        uint256 constructorAmount;
        uint256 initCallAmount;
    }

    error FailedContractCreation(address emitter);
    error FailedContractInitialisation(address emitter, bytes revertData);
    error InvalidSalt(address emitter);

    function deployCreate3(bytes32 salt, bytes memory initCode) external payable returns (address newContract);
    function computeCreate3Address(bytes32 salt, address deployer) external pure returns (address computedAddress);
    function computeCreate3Address(bytes32 salt) external view returns (address computedAddress);
}

contract DeployLitAgentRegistry is Script {
    // CREATEX contract address
    address constant CREATEX = 0xba5Ed099633D3B313e4D5F7bdc1305d3c28ba5Ed;
    
    function run() external {
        // Get private key from environment variable
        uint256 deployerPrivateKey = vm.envUint("LIT_AGENT_REGISTRY_DEPLOYER_PRIVATE_KEY");
        address deployer = vm.addr(deployerPrivateKey);

        // Get deployment entropy from environment variable
        string memory deploymentEntropy = vm.envString("LIT_AGENT_REGISTRY_DEPLOYMENT_ENTROPY");
        
        // Create salt with permissioned deploy protection and cross-chain redeploy protection
        // First 20 bytes: deployer address
        // 21st byte: 0x01 for cross-chain redeploy protection
        // Last 11 bytes: keccak256 of entropy
        bytes32 salt = bytes32(
            abi.encodePacked(
                deployer,                                   // First 20 bytes: deployer address
                hex"01",                                    // 21st byte: cross-chain redeploy protection
                bytes11(uint88(uint256(keccak256(abi.encodePacked(deploymentEntropy)))))  // Last 11 bytes: entropy
            )
        );

        // Check if CREATEX exists
        uint256 codeSize;
        assembly {
            codeSize := extcodesize(CREATEX)
        }

        // If we're on a dev network and CREATEX doesn't exist, deploy it
        if (block.chainid >= 31337 && codeSize == 0) {
            console.log("Dev network detected, deploying CREATEX...");
            vm.startBroadcast(deployerPrivateKey);
            
            // Deploy CREATEX using CREATE2
            bytes memory createXBytecode = hex"608060405234801561001057600080fd5b50610e9c806100206000396000f3fe60806040526004361061003f5760003560e01c80634af63f021461004457806352d1902d14610082578063b760faf91461009b578063c97eb1c3146100b9575b600080fd5b34801561005057600080fd5b5061006461005f366004610b0e565b6100d7565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b34801561008e57600080fd5b50610064610241565b6100646100a9366004610b0e565b61024f565b6100646100c7366004610b0e565b610259565b60006100e1610a8c565b6040517f3d602d80600a3d3981f3363d3d373d3d3d363d730000000000000000000000008152602081018390526e5af43d82803e903d91602b57fd5bf360881b60228201526037016040516020818303038152906040528051906020012090506101478161026c565b92915050565b6000806101598484610a8c565b90506000806000808473ffffffffffffffffffffffffffffffffffffffff1660008051602061084d8339815191528585604051610195929190610c1c565b60006040518083038185875af1925050503d80600081146101d2576040519150601f19603f3d011682016040523d82523d6000602084013e6101d7565b606091505b5091509150816102375760405162461bcd60e51b815260206004820152602360248201527f437265617465583a204661696c656420746f20696e697469616c697a6520636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610234565b50949350505050565b6000610147610a8c565b600061014784846101a4565b600061014784846100e1565b60008060006102798561026c565b905060008173ffffffffffffffffffffffffffffffffffffffff1663f23a6e616040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ea9190610c35565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156103a15760405162461bcd60e51b815260206004820152603760248201527f437265617465583a2043616e6e6f742064657374726f79206120636f6e74726160448201527f637420746861742068617320616c7265616479206265656e2064657374726f796064820152766564000000000000000000000000000000000000000000000000000000608482015260a401610234565b6000808473ffffffffffffffffffffffffffffffffffffffff1660008051602061084d8339815191526040516103d69190610c4e565b60006040518083038185875af1925050503d8060008114610413576040519150601f19603f3d011682016040523d82523d6000602084013e610418565b606091505b5091509150816104785760405162461bcd60e51b815260206004820152601d60248201527f437265617465583a204661696c656420746f2064657374726f792070726f78796044820152606401610234565b505050505050565b60008060006104908686866101a4565b90506000806000808473ffffffffffffffffffffffffffffffffffffffff1660008051602061084d83398151915288886040516104cc929190610c1c565b60006040518083038185875af1925050503d8060008114610509576040519150601f19603f3d011682016040523d82523d6000602084013e61050e565b606091505b50915091508161056e5760405162461bcd60e51b815260206004820152602360248201527f437265617465583a204661696c656420746f20696e697469616c697a6520636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610234565b5095945050505050565b60008060006105878787876100e1565b90506000806000808473ffffffffffffffffffffffffffffffffffffffff1660008051602061084d83398151915289896040516105c3929190610c1c565b60006040518083038185875af1925050503d8060008114610600576040519150601f19603f3d011682016040523d82523d6000602084013e610605565b606091505b50915091508161056e5760405162461bcd60e51b815260206004820152602360248201527f437265617465583a204661696c656420746f20696e697469616c697a6520636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610234565b60008060006106908686610a8c565b90506000806000808473ffffffffffffffffffffffffffffffffffffffff1660008051602061084d83398151915288886040516106cc929190610c1c565b60006040518083038185875af1925050503d8060008114610709576040519150601f19603f3d011682016040523d82523d6000602084013e61070e565b606091505b50915091508161056e5760405162461bcd60e51b815260206004820152602360248201527f437265617465583a204661696c656420746f20696e697469616c697a6520636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610234565b60008060006107908787610a8c565b90506000806000808473ffffffffffffffffffffffffffffffffffffffff1660008051602061084d83398151915289896040516107cc929190610c1c565b60006040518083038185875af1925050503d8060008114610809576040519150601f19603f3d011682016040523d82523d6000602084013e61080e565b606091505b50915091508161056e5760405162461bcd60e51b815260206004820152602360248201527f437265617465583a204661696c656420746f20696e697469616c697a6520636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610234565b60008060006108b08686866100e1565b90506000806000808473ffffffffffffffffffffffffffffffffffffffff1660008051602061084d83398151915288886040516108ec929190610c1c565b60006040518083038185875af1925050503d8060008114610929576040519150601f19603f3d011682016040523d82523d6000602084013e61092e565b606091505b50915091508161056e5760405162461bcd60e51b815260206004820152602360248201527f437265617465583a204661696c656420746f20696e697469616c697a6520636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610234565b60008060006109b08787610a8c565b90506000806000808473ffffffffffffffffffffffffffffffffffffffff1660008051602061084d83398151915289896040516109ec929190610c1c565b60006040518083038185875af1925050503d8060008114610a29576040519150601f19603f3d011682016040523d82523d6000602084013e610a2e565b606091505b50915091508161056e5760405162461bcd60e51b815260206004820152602360248201527f437265617465583a204661696c656420746f20696e697469616c697a6520636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610234565b6000610a96610241565b60405160200161037c9190610c4e565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610ae657610ae6610aad565b604052919050565b600067ffffffffffffffff821115610b0857610b08610aad565b5060051b60200190565b60008060408385031215610b2157600080fd5b8235915060208084013567ffffffffffffffff811115610b4057600080fd5b8401601f81018613610b5157600080fd5b8035610b64610b5f82610aee565b610abf565b81815286602083850101111561ffff831117610b7e57600080fd5b816020850160208301376000918101602001929092525095945050505050565b60005b83811015610bb9578181015183820152602001610ba1565b50506000910152565b60008151808452610bda816020860160208601610b9e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60608152600083516060808501526080850191506020845b81811015610c1157815183529383019391830191600101610bf5565b50838184015250949350505050565b828152604060208201526000610c356040830184610bc2565b949350505050565b600060208284031215610c4757600080fd5b5051919050565b60208152600061014760208301846108a4565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015610ca457610ca4610c7a565b500390565b600082610cc757634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212204c0e5f0e7a5c2c7a7a8f2d4c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c64736f6c63430008170033";
            
            // Calculate the CREATE2 salt to deploy at the expected address
            bytes32 create2Salt = bytes32(uint256(uint160(CREATEX)));
            
            // Deploy using CREATE2
            assembly {
                let deployed := create2(0, add(createXBytecode, 0x20), mload(createXBytecode), create2Salt)
                if iszero(deployed) {
                    revert(0, 0)
                }
                if iszero(eq(deployed, CREATEX)) {
                    revert(0, 0)
                }
            }
            
            vm.stopBroadcast();
            console.log("CREATEX deployed to:", CREATEX);
        }
        
        // Get the deterministic address before deployment
        address predictedAddress = ICreateX(CREATEX).computeCreate3Address(salt, deployer);
        console.log("Deployer address:", deployer);
        console.log("Salt:", vm.toString(salt));
        console.log("Registry will be deployed to:", predictedAddress);
        
        // Check if contract already exists at predicted address
        assembly {
            codeSize := extcodesize(predictedAddress)
        }
        if (codeSize > 0) {
            console.log("Contract already deployed at predicted address");
            return;
        }
        
        // Start broadcasting transactions
        vm.startBroadcast(deployerPrivateKey);

        // Deploy the registry using CREATEX
        bytes memory creationCode = type(LitAgentRegistry).creationCode;
        address actualAddress;
        try ICreateX(CREATEX).deployCreate3(salt, creationCode) returns (address deployed) {
            actualAddress = deployed;
        } catch Error(string memory reason) {
            revert(string.concat("Deployment failed: ", reason));
        } catch (bytes memory revertData) {
            revert("Deployment failed with unknown error");
        }
        
        // Stop broadcasting transactions
        vm.stopBroadcast();

        // Verify deployment
        require(actualAddress == predictedAddress, "Deployment address mismatch");
        
        // Verify contract code was deployed
        assembly {
            codeSize := extcodesize(actualAddress)
        }
        require(codeSize > 0, "Contract deployment failed");
        
        console.log("LitAgentRegistry successfully deployed to:", actualAddress);
    }
} 